<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.demo.damulTalk.friend.mapper.FriendMapper">

    <select id="selectFriends" resultType="com.demo.damulTalk.user.dto.UserStatusDto">
        SELECT
            u.user_id AS userId,
            u.nickname,
            u.profile_image_url AS profileImageUrl
        FROM
            users u
                JOIN (
                SELECT
                    CASE
                        WHEN first_user_id = #{userId} THEN second_user_id
                        ELSE first_user_id
                        END AS user_id
                FROM friends
                WHERE status = 'ACCEPTED'
                  AND (first_user_id = #{userId} OR second_user_id = #{userId})
            ) f ON u.user_id = f.user_id
    </select>

    <select id="selectFriendIds" resultType="int">
        SELECT u.user_id
        FROM users u
            JOIN (
                SELECT
                    CASE
                        WHEN first_user_id = #{userId} THEN second_user_id
                        ELSE first_user_id
                        END AS user_id
                FROM friends
                WHERE status = 'ACCEPTED'
                  AND (first_user_id = #{userId} OR second_user_id = #{userId})
            ) f ON u.user_id = f.user_id
    </select>

    <select id="selectFriendRequestsById" resultType="com.demo.damulTalk.friend.dto.FriendDto">
        SELECT
            u.user_id as userId,
            u.nickname,
            u.profile_image_url AS profileImageUrl
        FROM users u
            JOIN (
                SELECT
                    CASE
                        WHEN first_user_id = #{userId} THEN second_user_id
                        ELSE first_user_id
                        END AS user_id
                FROM friends
                WHERE status = 'PENDING'
                  AND (first_user_id = #{userId} OR second_user_id = #{userId})
            ) f ON u.user_id = f.user_id
    </select>

    <select id="selectFriendRelationShipCount">
        SELECT COUNT(*)
        FROM friends
        WHERE (first_user_id = #{userId} AND second_user_id = #{targetId})
          OR (first_user_id = #{targetId} AND second_user_id = #{userId})
    </select>

    <insert id="insertFollowRequest">
        INSERT INTO friends (first_user_id, second_user_id)
        VALUES(#{userId}, #{targetId})
    </insert>

    <delete id="deleteFriendById">
        DELETE FROM friends
        WHERE ((first_user_id = #{userId} AND second_user_id = #{friendId})
          OR (first_user_id = #{frinedId} AND second_user_id = #{userId}))
          AND status = 'ACCEPTED'
    </delete>

    <delete id="deleteFriendRequestById">
        DELETE FROM friends
        WHERE ((first_user_id = #{userId} AND second_user_id = #{friendId})
          OR (first_user_id = #{friendId} AND second_user_id = #{userId}))
          AND status = 'PENDING'
    </delete>

</mapper>